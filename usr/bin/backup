#!/usr/bin/env bash
##############################################################
#
# Backup to remote rsync service
#
# Usage: backup backup-host local-path [ local-path ... ]
#
# Each local-path will be backed up to backup-host, which
# must provide an rsync service named the same as the name
# of the user running this script. For example, if user 
# 'joe' runs the command 'backup zeus Documents Photos', a
# backup will be performed to the remote rsync service at
# 'zeus::joe'.
#
# If an identical backup is already running then nothing is
# done (this avoids running multiple jobs).
#
# The normal use of this script would be via a cron job. An
# example crontab is shown below:
#
#    MAILTO=joe@example.com
#    */30 * * * * /home/joe/backup zeus Documents Photos
#
# tested against Vixie Cron
#
############################################### JL 20130927 ##

# Command Line
COMMAND_LINE="$0 $*"

# Backup host
BACKUP_HOST=$1
shift

# What to back up
BACKUP_DIRS="$*"

# Sanity check
[[ -z "${BACKUP_HOST}" || -z "${BACKUP_DIRS}" ]] && {
    echo "Usage: $0 backup-host local-path [ local-path ... ]"
    exit 1
}

# Tools
PING=/sbin/ping
BASH=/bin/bash
RSYNC=/usr/bin/rsync

# Is there a job already running
JOBS=$(sh -c "ps axo pid,command | grep \"${COMMAND_LINE}\" | grep -v grep | grep -v $$")
if [[ -n "${JOBS}" ]]
then
    echo "A job is already in progress at $(date)"
    echo -e ${JOBS}
else
    # Is the backup host up ?
    ${PING} -c1 ${BACKUP_HOST} &> /dev/null
    if [[ $? != 0 ]]
    then
        echo "Backup host ${BACKUP_HOST} was not available at $(date)"
    else
        echo "Backup host ${BACKUP_HOST} is up"

        # RSYNC service to which we will back up
        BACKUP_SERVICE="${BACKUP_HOST}::${USER}"

        echo "Starting backup to ${BACKUP_SERVICE} at $(date)"
        echo "Backing up: ${BACKUP_DIRS}"

        time ${RSYNC} -av --delete ${BACKUP_DIRS} ${BACKUP_SERVICE}

        echo # blank line
        echo "Backup completed at $(date)"
    fi
fi
