#!/usr/bin/env bash ##########################################
#
# Backup to remote rsync service
#
# Usage: backup backup-host local-path [ local-path ... ]
#
# Each local-path will be backed up to backup-host, which
# must provide an rsync service named the same as the name
# of the user running this script. For example, if user 
# 'joe' runs the command 'backup zeus Documents Photos', a
# backup will be performed to the remote rsync service at
# 'zeus::joe'.
#
# The backup is launched in a detached screen session so
# that it can be reattached with 'screen -r'. If such a
# session exists then subsequent attempts to start the
# backup will fail (to avoid running multiple jobs).
#
# The output from the backup command (rsync -av) is emailed
# to the user (or to the address contained in the MAILTO
# environment variable).
#
# The normal use of this script would be via a cron job. An
# example crontab is shown below:
#
#    MAILTO=joe@example.com
#    */30 * * * * /home/joe/backup zeus Documents Photos
#
# tested against Vixie Cron
#
############################################### JL 20130927 ##

# Backup host
BACKUP_HOST=$1
shift

# What to back up
BACKUP_DIRS="$*"

# Sanity check
[[ -z "${BACKUP_HOST}" || -z "${BACKUP_DIRS}" ]] && {
    echo "Usage: $0 backup-host local-path [ local-path ... ]"
    exit 1
}

# Where to send output
LOG_EMAIL=${MAILTO:-$USER}

# Tools
PING=/sbin/ping
SCREEN=/usr/bin/screen
BASH=/bin/bash
RSYNC=/usr/bin/rsync

# Is the backup host up
${PING} -c1 ${BACKUP_HOST} &> /dev/null
if [[ $? == 0 ]]
then
    echo "Backup host ${BACKUP_HOST} is up"

    # RSYNC service to which we will back up
    BACKUP_SERVICE="${BACKUP_HOST}::${USER}"

    # Is there a backup already running
    JOBS=$(${SCREEN} -ls | grep ${BACKUP_SERVICE})

    if [[ -n "${JOBS}" ]]
    then
        echo "A backup is already in progress at $(date)"
        echo -e ${JOBS}
    else
        LOG_TITLE="${BACKUP_SERVICE} $(date)"
        SCREEN_COMMAND="${RSYNC} -av --delete ${BACKUP_DIRS} ${BACKUP_SERVICE} | tee >(mail -s '${LOG_TITLE}' ${LOG_EMAIL})"
       ${SCREEN} -L -dmS ${BACKUP_SERVICE} bash -c "${SCREEN_COMMAND}"

        if [[ $? == 0 ]]
        then
            JOBS=$(${SCREEN} -ls | grep ${BACKUP_SERVICE})
            echo "Launched backup to ${BACKUP_SERVICE} at $(date)"
            echo -e ${JOBS}
            echo "Backing up: ${BACKUP_DIRS}"
            echo "Will send results to ${LOG_EMAIL} ref '${LOG_TITLE}'"
        else
            echo "Failed to launch backup to ${BACKUP_SERVICE}"
        fi
    fi
else
    echo "Backup host ${BACKUP_HOST} was not available at $(date)"
fi
